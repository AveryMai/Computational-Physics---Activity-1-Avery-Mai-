# Computational Physics Assignment
# The Euler's Method - 1D Space
# Task: Find Position, Velocity, and Acceleration, given Force
# Student Name: Avery Mai
# Date: March 10, 2025

# Import some useful libraries
import numpy as np                  #to work with arrays
import matplotlib.pyplot as plt     #to graph
import math                         #to work with math functions like sine or cosine

plt.style.use('seaborn-poster')     # just a style to graph a function

# Define here the Force Function
def F(t, x, v):
  #return - m * g                    # free fall (1a)
  #return - m * g - b * v            # free fall with air resistance (1b)
  #return - k * x                    # harmonic oscillator (2a) 
  #return - k * x - b * v            # harmonic oscillator with air resistance (2b)
  #return A * math.sin(b * t)        # sinusoidal force (3)
  return - m * g - k * x - b * v     # gravity + air resistance + elastic force (4)

# Define useful constants as global variables
A = 1
b = 0.5
k = 0.5
g = 9.806
m = 0.1

# Choose a time interval
t1 = 0
t2 = 10

# Choose the number of steps of integration
n = 100

# Find the time step dt
dt = (t2 - t1)/n

# make arrays for t, x, v, and a
t = np.arange(t1, t2 + dt, dt)        # Initialise the time array (n+1 elements)
x = np.zeros(len(t))                  # Initialise the position array with zeros
v = np.zeros(len(t))                  # Initialise the velocity array with zeros
a = np.zeros(len(t))                  # Initialise the acceleration array with zeros

# Define the initial conditions x(0) and v(0) (you may change these values)
x[0] = 1
v[0] = 0

# Explicit Euler's Method:
for i in range(n):                              # from i = 0 to i = n - 1
    a[i] = F(t[i], x[i], v[i])/m               # compute a(t)
    v[i + 1] = v[i] + a[i] * dt                 # compute v(t)
    x[i + 1] = x[i] + (v[i] + v[i + 1])*dt/2    # compute x(t)
    
a[n] = a[n-1] # Fill the last element of the acceleration array

# Prepare to graph
plt.figure(figsize = (12, 8))
plt.plot(t, x, '-', label = 'Position')
plt.plot(t, v, '-', label = 'Velocity')
plt.plot(t, a, '-', label = 'Acceleration')
plt.title('Position, Velocity, and Acceleration versus Time')
plt.xlabel('t')
plt.ylabel('x, v, a')
plt.grid()
plt.legend(loc='lower right')

# Show the Graph
plt.show()
